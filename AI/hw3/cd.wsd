@startuml
' 다이어그램 제목
title Tutorial.txt Components and Interactions

' 라이브러리 정의
package "Gymnasium Library" as GymLib {
  component "FrozenLake-v1" as Env_Comp
}

package "NumPy Library" as NumPyLib {
  component "NumPy" as NP_Comp
}

' 스크립트 내 함수 (Artifact로 표현)
artifact "generate_random_policy" as GenPolicy_Art
artifact "run_one_experiment" as RunExp_Art
artifact "display_policy" as DispPolicy_Art
artifact "main function" as Main_Art

' 데이터 구조 (Node 또는 Rectangle로 표현)
rectangle "Policy\n(NumPy Array)" as Policy_Data
rectangle "Environment State\n& Dynamics (P)" as Env_Data
note right of Env_Data
  Includes P(s'|s,a)
  and R(s,a,s')
end note

' 관계 정의
' main 함수는 환경을 생성하고 다른 함수들을 호출하며 환경과 직접 상호작용 시연
Main_Art --> GymLib : creates Env
Main_Art --> GenPolicy_Art : calls
Main_Art --> RunExp_Art : calls
Main_Art --> DispPolicy_Art : calls
Main_Art --> Env_Comp : interacts directly (step, render, get_wrapper_attr)

' 환경 구성 요소
Env_Comp --> Env_Data : manages

' generate_random_policy 함수 관계
GenPolicy_Art ..> NP_Comp : uses
GenPolicy_Art --> Policy_Data : creates

' run_one_experiment 함수 관계
RunExp_Art ..> Env_Comp : uses
RunExp_Art ..> Policy_Data : uses
RunExp_Art ..> NP_Comp : uses (for stats)

' display_policy 함수 관계
DispPolicy_Art ..> Policy_Data : uses
DispPolicy_Art ..> NP_Comp : uses (reshape)

' 환경은 내부적으로 NumPy 사용
Env_Comp ..> NP_Comp : uses (internal)

@enduml