@startuml
actor User
participant "Main" as Main
participant "AI1_HW1_Problem.CityMap" as CityMap
participant "AI1_HW1_Problem.SearchRequest" as SearchRequest
participant "AI1_HW1_Problem.Problem" as Problem
participant "AI1_HW1_Problem.State" as State
participant "AI1_HW1_Search.SearchAlgorithms" as Algorithms
participant "AI1_HW1_Search.SearchResults" as Results
participant "AI1_HW1_Search.SearchTreeNode" as TreeNode

User -> Main : 프로그램 실행
Main -> CityMap : "./tegucigalpa.json" 파일 로드 [1, 2]
CityMap -->> Main : CityMap 객체 반환 [3]
Main -> SearchRequest : "./test_cases.json" 파일 로드 [1, 4]
SearchRequest -->> Main : SearchRequest 리스트 반환 [5]

loop 각 SearchRequest (test_case) [6]
  Main -> Problem : CityMap, test_case 전달하여 Problem 생성 [7, 8]
  Problem -->> Main : Problem 객체 반환 [8]

  Main -> Algorithms : problem, BreadthFirstSearch 상수 전달하여 search 호출 [7, 9]
  Algorithms -> Algorithms : breadth_first_search(problem) [10]
  Algorithms -> Problem : get_initial_state() 호출 [8]
  Problem -->> Algorithms : 초기 State 반환 [8]
  Algorithms -> TreeNode : 초기 State를 담는 TreeNode 생성 [11, 12]
  Algorithms -> Algorithms : FIFO 큐 (frontier) 초기화 및 초기 TreeNode 추가 [13]
  Algorithms -> Algorithms : reached (set) 초기화 및 초기 State 추가 [13]

  loop frontier가 비어있지 않은 동안 [13]
    Algorithms -> Algorithms : frontier에서 node 추출 (FIFO) [13]
    Algorithms -> Problem : is_goal_state(node.state) 호출 [13, 14]
    alt 목표 상태인 경우 [13]
      Algorithms -> Results : 해 경로, 비용 등 저장 [10, 15]
      Algorithms -->> Algorithms : 결과 반환
      break
    end

    Algorithms -> Problem : generate_children(node.state) 호출 [13, 16]
    Problem -->> Algorithms : 자식 State 리스트 반환 [17]

    loop 각 child in 자식 State 리스트 [13]
      Algorithms -> TreeNode : child State를 담는 TreeNode 생성 (parent=node, action, path_cost) [12, 18]
      Algorithms -> State : child State 객체 [18, 19]
      Algorithms -> State : get_representation() 호출 [20]
      alt child State가 reached에 없는 경우 [13]
        Algorithms -> reached : child State 추가 [13]
        Algorithms -> Algorithms : frontier에 child TreeNode 추가 [13]
      end
    end
  end
  Algorithms -> Results : None, None, 노드 수, 탐색 노드 수 저장 (실패 시) [10, 15]
  Algorithms -->> Main : SearchResults 객체 반환 [21]
  Main -> Algorithms : search_results, test_case, 탐색 시간 전달하여 print_solution_details 호출 [21, 22]
  Algorithms -> Algorithms : 결과 출력 [22, 23]

  ' Main -> Algorithms : problem, UniformCostSearch 상수 전달하여 search 호출 [7, 9]
  ' Algorithms -> Algorithms : uniform_cost_search(problem) [24]
  ' Algorithms -> Problem : get_initial_state() 호출 [8]
  ' Problem -->> Algorithms : 초기 State 반환 [8]
  ' Algorithms -> TreeNode : 초기 State를 담는 TreeNode 생성 [11, 12]
  ' Algorithms -> Algorithms : 우선순위 큐 (frontier) 초기화 및 초기 TreeNode 추가 (PATH-COST 기준) [11]
  ' Algorithms -> Algorithms : reached (lookup table) 초기화 및 초기 State와 TreeNode 저장 [11]

  ' loop frontier가 비어있지 않은 동안 [11]
  '   Algorithms -> Algorithms : frontier에서 node 추출 (최저 비용 우선) [11]
  '   Algorithms -> Problem : is_goal_state(node.state) 호출 [11, 14]
  '   alt 목표 상태인 경우 [11]
  '     Algorithms -> Results : 해 경로, 비용 등 저장 [15, 24]
  '     Algorithms -->> Algorithms : 결과 반환
  '     break
  '   end

  '   Algorithms -> Problem : generate_children(node.state) 호출 [11, 16]
  '   Problem -->> Algorithms : 자식 State 리스트 반환 [17]

  '   loop 각 child in 자식 State 리스트 [11]
  '     Algorithms -> Problem : get_action_cost(node.state, action) 호출 [17, 18]
  '     Problem -->> Algorithms : 액션 비용 반환 [25]
  '     Algorithms -> TreeNode : child State를 담는 TreeNode 생성 (parent=node, action, path_cost=node.path_cost + action_cost) [12, 18]
  '     Algorithms -> State : child State 객체 [18, 19]
  '     Algorithms -> State : get_representation() 호출 [20]
  '     alt child State가 reached에 없거나 child의 PATH-COST가 reached[s].PATH-COST보다 작은 경우 [18]
  '       Algorithms -> reached : child TreeNode 저장 [18]
  '       Algorithms -> Algorithms : frontier에 child TreeNode 추가 (우선순위 갱신) [18]
  '     end
  '   end
  ' end
  ' Algorithms -> Results : None, None, 노드 수, 탐색 노드 수 저장 (실패 시) [15, 24]
  ' Algorithms -->> Main : SearchResults 객체 반환 [21]
  ' Main -> Algorithms : search_results, test_case, 탐색 시간 전달하여 print_solution_details 호출 [21, 22]
  ' Algorithms -> Algorithms : 결과 출력 [22, 23]

  ' Main -> Algorithms : problem, AStarSearch 상수 전달하여 search 호출 [7, 26]
  ' Algorithms -> Algorithms : A_star_search(problem) [22]
  ' Algorithms -> Problem : get_initial_state() 호출 [8]
  ' Problem -->> Algorithms : 초기 State 반환 [8]
  ' Algorithms -> TreeNode : 초기 State를 담는 TreeNode 생성 [11, 12]
  ' Algorithms -> Algorithms : 우선순위 큐 (frontier) 초기화 및 초기 TreeNode 추가 (f(n) = g(n) + h(n) 기준) [11]
  ' Algorithms -> Algorithms : reached (lookup table) 초기화 및 초기 State와 TreeNode 저장 [11]

  ' loop frontier가 비어있지 않은 동안 [11]
  '   Algorithms -> Algorithms : frontier에서 node 추출 (최저 f(n) 우선) [11]
  '   Algorithms -> Problem : is_goal_state(node.state) 호출 [11, 14]
  '   alt 목표 상태인 경우 [11]
  '     Algorithms -> Results : 해 경로, 비용 등 저장 [15, 22]
  '     Algorithms -->> Algorithms : 결과 반환
  '     break
  '   end

  '   Algorithms -> Problem : generate_children(node.state) 호출 [11, 16]
  '   Problem -->> Algorithms : 자식 State 리스트 반환 [17]

  '   loop 각 child in 자식 State 리스트 [11]
  '     Algorithms -> Problem : get_action_cost(node.state, action) 호출 [17, 18]
  '     Problem -->> Algorithms : 액션 비용 반환 [25]
  '     Algorithms -> TreeNode : child State를 담는 TreeNode 생성 (parent=node, action, path_cost=node.path_cost + action_cost) [12, 18]
  '     Algorithms -> Problem : estimate_cost_to_solution(child.state) 호출 [22, 25]
  '     Problem -->> Algorithms : Heuristic 값 반환 [27]
  '     Algorithms -> Algorithms : f_cost = path_cost + heuristic [22]
  '     Algorithms -> State : child State 객체 [18, 19]
  '     Algorithms -> State : get_representation() 호출 [20]
  '     alt child State가 reached에 없거나 child의 PATH-COST가 reached[s].PATH-COST보다 작은 경우 [18]
  '       Algorithms -> reached : child TreeNode 저장 [18]
  '       Algorithms -> Algorithms : frontier에 child TreeNode 추가 (우선순위 갱신) [18]
  '     end
  '   end
  ' end
  ' Algorithms -> Results : None, None, 노드 수, 탐색 노드 수 저장 (실패 시) [15, 22]
  ' Algorithms -->> Main : SearchResults 객체 반환 [21]
  ' Main -> Algorithms : search_results, test_case, 탐색 시간 전달하여 print_solution_details 호출 [21, 22]
  ' Algorithms -> Algorithms : 결과 출력 [22, 23]
end

@enduml