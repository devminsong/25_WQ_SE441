@startuml

title BFS

actor User

participant Main

participant Problem

participant SearchAlgorithms as Algorithms

participant SearchTreeNode as TreeNode

participant State

participant SearchResults as Results

User->>Main: Run program

Main->>Main: Load CityMap, SearchRequest

Main->>Problem: Create problem (CityMap, test_case)

Problem-->>Main: Return Problem object

Main->>Algorithms: Call breadth_first_search(problem)

Note over Algorithms: BFS start

Algorithms->>Problem: Call get_initial_state()

Problem-->>Algorithms: Return initial State

Algorithms->>TreeNode: Create initial node (parent=None, action=None, state=initial_state, cost=0)

TreeNode-->>Algorithms: Return start_node

Algorithms->>Problem: Call is_goal_state(start_node.state)

Problem-->>Algorithms: Return goal state status

alt If initial state is the goal state

Algorithms->>TreeNode: Call path_to_root(), get_path_cost()

TreeNode-->>Algorithms: Return path, cost

Algorithms->>Results: Create results (path, cost, nodes_reached=1, nodes_explored=1)

Algorithms-->>Main: Return SearchResults

else If initial state is not the goal state

Algorithms->>Algorithms: frontier = [start_node] Initialize

Algorithms->>State: Call reached = initial_state.get_representation()

State-->>Algorithms: Return state representation

Algorithms->>Algorithms: Initialize nodes_explored = 0, nodes_reached = 1

loop While frontier is not empty

Algorithms->>Algorithms: current_node = frontier.pop(0) (FIFO)

Algorithms->>Algorithms: nodes_explored += 1

Algorithms->>Problem: Call generate_children(current_node.state)

Problem-->>Algorithms: Return next_states list

loop For each next_state

Algorithms->>State: Call s = next_state.get_representation()

State-->>Algorithms: Return state representation

alt If state is not in reached

Algorithms->>Algorithms: nodes_reached += 1

Algorithms->>Algorithms: reached.add(s)

Algorithms->>State: Call next_state.get_location()

State-->>Algorithms: Return location(action)

Algorithms->>Problem: Call get_action_cost(current_node.state, action)

Problem-->>Algorithms: Return action cost

Algorithms->>TreeNode: Create child node (parent=current_node, action, state=next_state, cost=current_node.cost+cost)

TreeNode-->>Algorithms: Return child_node

Algorithms->>Problem: Call is_goal_state(child_node.state)

Problem-->>Algorithms: Return goal state status

alt If child node is the goal state

Algorithms->>TreeNode: Call path_to_root(), get_path_cost()

TreeNode-->>Algorithms: Return path, cost

Algorithms->>Results: Create results (path, cost, nodes_reached, nodes_explored)

Algorithms-->>Main: Return SearchResults

else If child node is not the goal state

Algorithms->>Algorithms: frontier.append(child_node)

end

end

end

end

Note over Algorithms: Goal state not found

Algorithms->>Results: Create results (None, None, nodes_reached, nodes_explored)

Algorithms-->>Main: Return SearchResults

end

Main->>Main: Output and process results

@enduml

' @startuml
' title BFS

' actor User
' participant Main
' participant Problem
' participant SearchAlgorithms as Algorithms
' participant SearchTreeNode as TreeNode
' participant State
' participant SearchResults as Results

' User->>Main: 프로그램 실행
' Main->>Main: CityMap, SearchRequest 로드
' Main->>Problem: 문제 생성 (CityMap, test_case)
' Problem-->>Main: Problem 객체 반환
' Main->>Algorithms: breadth_first_search(problem) 호출

' Note over Algorithms: BFS 시작

' Algorithms->>Problem: get_initial_state() 호출
' Problem-->>Algorithms: 초기 State 반환

' Algorithms->>TreeNode: 초기 노드 생성 (parent=None, action=None, state=initial_state, cost=0)
' TreeNode-->>Algorithms: start_node 반환

' Algorithms->>Problem: is_goal_state(start_node.state) 호출
' Problem-->>Algorithms: 목표 상태 여부 반환

' alt 시작 상태가 목표 상태인 경우
'     Algorithms->>TreeNode: path_to_root(), get_path_cost() 호출
'     TreeNode-->>Algorithms: 경로, 비용 반환
'     Algorithms->>Results: 결과 생성 (경로, 비용, nodes_reached=1, nodes_explored=1)
'     Algorithms-->>Main: SearchResults 반환
' else 시작 상태가 목표 상태가 아닌 경우
'     Algorithms->>Algorithms: frontier = [start_node] 초기화
'     Algorithms->>State: reached = initial_state.get_representation() 호출
'     State-->>Algorithms: 상태 표현 반환
'     Algorithms->>Algorithms: nodes_explored = 0, nodes_reached = 1 초기화
    
'     loop frontier가 비어있지 않은 동안
'         Algorithms->>Algorithms: current_node = frontier.pop(0) (FIFO)
'         Algorithms->>Algorithms: nodes_explored += 1
        
'         Algorithms->>Problem: generate_children(current_node.state) 호출
'         Problem-->>Algorithms: next_states 리스트 반환
        
'         loop 각 next_state에 대해
'             Algorithms->>State: s = next_state.get_representation() 호출
'             State-->>Algorithms: 상태 표현 반환
            
'             alt 상태가 reached에 없는 경우
'                 Algorithms->>Algorithms: nodes_reached += 1
'                 Algorithms->>Algorithms: reached.add(s)
                
'                 Algorithms->>State: next_state.get_location() 호출
'                 State-->>Algorithms: 위치(action) 반환
                
'                 Algorithms->>Problem: get_action_cost(current_node.state, action) 호출
'                 Problem-->>Algorithms: 액션 비용 반환
                
'                 Algorithms->>TreeNode: 자식 노드 생성 (parent=current_node, action, state=next_state, cost=current_node.cost+cost)
'                 TreeNode-->>Algorithms: child_node 반환
                
'                 Algorithms->>Problem: is_goal_state(child_node.state) 호출
'                 Problem-->>Algorithms: 목표 상태 여부 반환

'                 alt 자식 노드가 목표 상태인 경우
'                     Algorithms->>TreeNode: path_to_root(), get_path_cost() 호출
'                     TreeNode-->>Algorithms: 경로, 비용 반환
'                     Algorithms->>Results: 결과 생성 (경로, 비용, nodes_reached, nodes_explored)
'                     Algorithms-->>Main: SearchResults 반환
'                 else 자식 노드가 목표 상태가 아닌 경우
'                     Algorithms->>Algorithms: frontier.append(child_node)
'                 end
'             end
'         end
'     end
    
'     Note over Algorithms: 목표 상태를 찾지 못함
'     Algorithms->>Results: 결과 생성 (None, None, nodes_reached, nodes_explored)
'     Algorithms-->>Main: SearchResults 반환
' end

' Main->>Main: 결과 출력 및 처리
' @enduml

' @startuml

' actor User

' participant "Main" as Main

' participant "AI1_HW1_Problem.CityMap" as CityMap

' participant "AI1_HW1_Problem.SearchRequest" as SearchRequest

' participant "AI1_HW1_Problem.Problem" as Problem

' participant "AI1_HW1_Problem.State" as State

' participant "AI1_HW1_Search.SearchAlgorithms" as Algorithms

' participant "AI1_HW1_Search.SearchResults" as Results

' participant "AI1_HW1_Search.SearchTreeNode" as TreeNode

' User -> Main : 프로그램 실행

' Main -> CityMap : "./tegucigalpa.json" 파일 로드 [3, 4]

' CityMap -->> Main : CityMap 객체 반환 [3]

' Main -> SearchRequest : "./test_cases.json" 파일 로드 [3, 4]

' SearchRequest -->> Main : SearchRequest 리스트 반환 [3]

' loop 각 SearchRequest (test_case) [3]

' Main -> Problem : CityMap, test_case 전달하여 Problem 생성 [5, 6]

' Problem -->> Main : Problem 객체 반환 [5]

' Main -> Algorithms : problem, BreadthFirstSearch 상수 전달하여 search 호출 [5, 7]

' Algorithms -> Algorithms : breadth_first_search(problem) [5, 8]

' Algorithms -> Problem : get_initial_state() 호출 [5, 6]

' Problem -->> Algorithms : 초기 State 반환 [5]

' Algorithms -> TreeNode : 초기 State를 담는 TreeNode 생성 [5, 9]

' TreeNode -> Algorithms : 초기 State를 담는 TreeNode 반환 [5]

' Algorithms -> Algorithms : FIFO 큐 (frontier) 초기화 및 초기 TreeNode 추가 [5]

' Algorithms -> Algorithms : reached (set) 초기화 및 초기 State 추가 [5]

' loop frontier가 비어있지 않은 동안 [2, 10]

' Algorithms -> Algorithms : **frontier에서 node 추출 (FIFO)** [2, 10]

' Algorithms -> TreeNode : 현재 노드의 State 요청 [9, 10]

' TreeNode -> Algorithms : 저장된 State 반환 [10]

' Algorithms -> Problem : **is_goal_state(node.state) 호출** [2, 10, 11]

' alt 목표 상태인 경우 [2, 10]

' Algorithms -> Results : 해 경로, 비용 등 저장 [8, 10]

' Algorithms -->> Algorithms : 결과 반환 [10]

' break

' else [10]

' Algorithms -> TreeNode : 현재 노드의 State 요청 [9, 10]

' TreeNode -> Algorithms : 저장된 State 반환 [10]

' Algorithms -> Problem : **generate_children(node.state) 호출** [2, 10, 11]

' Problem -->> Algorithms : 자식 State 리스트 반환 [10]

' loop 각 child_state in 자식 State 리스트 [2, 10]

' Algorithms -> Problem : get_action_cost(current_node.state, action) 호출 [10, 12]

' Problem -->> Algorithms : 액션 비용 반환 [10]

' Algorithms -> TreeNode : child_state를 담는 TreeNode 생성 (parent=node, action, path_cost) [9, 10]

' Algorithms -> State : child_state 객체 [10, 13]

' Algorithms -> State : get_representation() 호출 [14, 15]

' alt child State가 reached에 없는 경우 [2, 14]

' Algorithms -> Algorithms : reached에 child State 추가 [2, 14]

' Algorithms -> Algorithms : frontier에 child TreeNode 추가 [2, 14]

' end

' end

' end

' Algorithms -> Results : None, None, 노드 수, 탐색 노드 수 저장 (실패 시) [8, 14]

' Algorithms -->> Main : SearchResults 객체 반환 [8, 14]

' Main -> Algorithms : search_results, test_case, 탐색 시간 전달하여 print_solution_details 호출 [7, 14]

' Algorithms -> Algorithms : 결과 출력 [7, 14]

' end

' @enduml

' @startuml
' actor User
' participant "Main" as Main
' participant "AI1_HW1_Problem.CityMap" as CityMap
' participant "AI1_HW1_Problem.SearchRequest" as SearchRequest
' participant "AI1_HW1_Problem.Problem" as Problem
' participant "AI1_HW1_Search.SearchAlgorithms" as Algorithms
' participant "AI1_HW1_Search.SearchResults" as Results
' participant "AI1_HW1_Search.SearchTreeNode" as TreeNode

' User -> Main : 프로그램 실행
' Main -> CityMap : "./tegucigalpa.json" 파일 로드 [1, 2]
' CityMap -->> Main : CityMap 객체 반환 [3]
' Main -> SearchRequest : "./test_cases.json" 파일 로드 [1, 4, 5]
' SearchRequest -->> Main : SearchRequest 리스트 반환 [6]
' loop 각 SearchRequest (test_case) [7]
'   Main -> Problem : CityMap, test_case 전달하여 Problem 생성 [8, 9]
'   Problem -->> Main : Problem 객체 반환 [9]
'   Main -> Algorithms : problem, BreadthFirstSearch 상수 전달하여 search 호출 [10, 11]
'   Algorithms -> Algorithms : breadth_first_search(problem) [12, 13]
'   Algorithms -> Problem : get_initial_state() 호출 [9, 12]
'   Problem -->> Algorithms : 초기 State 반환 [12]
'   Algorithms -> TreeNode : 초기 State를 담는 TreeNode 생성 (parent=None, action=None, state=initial_state, path_cost=0) [12, 14]
'   TreeNode -->> Algorithms : 초기 TreeNode 반환 [15]
'   Algorithms -> Algorithms : frontier = FIFO 큐 초기화 및 초기 TreeNode 추가 [12, 16]
'   Algorithms -> Algorithms : reached = set() 초기화 및 initial_state의 표현(representation) 추가 [16-18]
'   loop frontier가 비어있지 않은 동안 [16, 17]
'     Algorithms -> Algorithms : current_node = frontier.pop(0) (FIFO 방식으로 노드 추출) [16, 17]
'     Algorithms -> Problem : is_goal_state(current_node.get_state()) 호출 [12, 16, 19]
'     alt 목표 상태인 경우 [12, 16]
'       Algorithms -> Results : SearchResults 객체 생성 (해 경로: current_node.path_to_root(), 해 비용: current_node.get_path_cost(), 도달한 노드 수, 탐색한 노드 수) [20, 21]
'       Results -->> Algorithms : SearchResults 객체 반환 [15]
'       break
'     end
'     Algorithms -> Problem : generate_children(current_node.get_state()) 호출 [17, 22, 23]
'     Problem -->> Algorithms : 자식 State 리스트 (next_states) 반환 [17, 22]
'     loop 각 next_state in next_states [24]
'       Algorithms -> State : next_state
'       Algorithms -> State : get_representation() 호출 [18, 24]
'       alt next_state의 표현이 reached에 없는 경우 [16, 24]
'         Algorithms -> Algorithms : reached.add(next_state의 표현) [16, 24]
'         Algorithms -> Problem : get_action_cost(current_node.get_state(), next_state의 위치) 호출 [22, 24]
'         Problem -->> Algorithms : action cost 반환 [22]
'         Algorithms -> TreeNode : child_node = SearchTreeNode(parent=current_node, action=next_state의 위치, state=next_state, path_cost=current_node.get_path_cost() + action_cost) [14, 24]
'         TreeNode -->> Algorithms : child_node 반환 [15]
'         Algorithms -> Problem : is_goal_state(child_node.get_state()) 호출 [16, 19, 20]
'         alt child_node가 목표 상태인 경우 [16, 20]
'           Algorithms -> Results : SearchResults 객체 생성 (해 경로: child_node.path_to_root(), 해 비용: child_node.get_path_cost(), 도달한 노드 수, 탐색한 노드 수) [20, 21]
'           Results -->> Algorithms : SearchResults 객체 반환 [15]
'           break
'         else 목표 상태가 아닌 경우
'           Algorithms -> Algorithms : frontier.append(child_node) (자식 노드를 frontier의 끝에 추가) [16, 20]
'         end
'       end
'     end
'   end
'   Algorithms -> Results : SearchResults 객체 생성 (solution_path=None, solution_cost=None, nodes_reached, nodes_explored) (목표 상태를 찾지 못한 경우) [20, 21]
'   Results -->> Algorithms : SearchResults 객체 반환 [15]
'   Main -> Algorithms : test_case, SearchResults 객체, 탐색 시간 전달하여 print_solution_details 호출 [10, 25]
'   Algorithms -> Algorithms : 결과 출력 [25, 26]
' end
' @enduml

' @startuml
' actor User
' participant "Main" as Main
' participant "AI1_HW1_Problem.CityMap" as CityMap
' participant "AI1_HW1_Problem.SearchRequest" as SearchRequest
' participant "AI1_HW1_Problem.Problem" as Problem
' participant "AI1_HW1_Problem.State" as State
' participant "AI1_HW1_Search.SearchAlgorithms" as Algorithms
' participant "AI1_HW1_Search.SearchResults" as Results
' participant "AI1_HW1_Search.SearchTreeNode" as TreeNode

' User -> Main : 프로그램 실행
' Main -> CityMap : "./tegucigalpa.json" 파일 로드 [9]
' CityMap -->> Main : CityMap 객체 반환 [9]
' Main -> SearchRequest : "./test_cases.json" 파일 로드 [9]
' SearchRequest -->> Main : SearchRequest 리스트 반환 [9]

' loop 각 SearchRequest (test_case) [9]
'   Main -> Problem : CityMap, test_case 전달하여 Problem 생성 [9]
'   Problem -->> Main : Problem 객체 반환 [10]
'   Main -> Algorithms : problem, SearchAlgorithms.BreadthFirstSearch 전달하여 search 호출 [10]
'   Algorithms -> Algorithms : breadth_first_search(problem) [10]
'   Algorithms -> Problem : get_initial_state() 호출 [10]
'   Problem -->> Algorithms : 초기 State 반환 [10]
'   Algorithms -> TreeNode : 초기 State를 담는 TreeNode 생성 (parent=None, action=None, state=initial_state, path_cost=0) [10]
'   TreeNode -->> Algorithms : 초기 TreeNode 반환 [10]
'   Algorithms -> Algorithms : frontier = [initial_node] [10]
'   Algorithms -> Algorithms : reached = {initial_state.get_representation()} [10]

'   loop while frontier is not empty [11]
'     Algorithms -> Algorithms : current_node = frontier.pop(0) [11]
'     Algorithms -> Problem : is_goal_state(current_node.get_state()) 호출 [11]
'     alt is goal state [11]
'       Algorithms -> Results : SearchResults(current_node.path_to_root(), current_node.get_path_cost(), nodes_reached, nodes_explored) 생성 [11]
'       Results -->> Algorithms : 결과 반환 [11]
'       break
'     end

'     Algorithms -> Problem : generate_children(current_node.get_state()) 호출 [11]
'     Problem -->> Algorithms : next_states 리스트 반환 [11]

'     loop for each next_state in next_states [11]
'       Algorithms -> State : s = next_state.get_representation() [12]
'       alt s not in reached [12]
'         Algorithms -> Algorithms : reached.add(s) [12]
'         Algorithms -> State : action = next_state.get_location() [12]
'         Algorithms -> Problem : get_action_cost(current_node.get_state(), action) 호출 [12]
'         Problem -->> Algorithms : cost 반환 [12]
'         Algorithms -> TreeNode : child_node = TreeNode(current_node, action, next_state, current_node.get_path_cost() + cost) 생성 [12]
'         TreeNode -->> Algorithms : child_node 반환 [12]
'         Algorithms -> Algorithms : frontier.append(child_node) [12]
'       end
'     end
'   end
'   Algorithms -> Results : SearchResults(None, None, nodes_reached, nodes_explored) 생성 (탐색 실패) [12]
'   Results -->> Algorithms : 결과 반환 [12]
'   Algorithms -> Main : SearchResults 객체 반환 [12]
'   Main -> Algorithms : search_results, test_case, 탐색 시간 전달하여 print_solution_details 호출 [12]
'   Algorithms -> Algorithms : 결과 출력 [12]
' end

' @enduml